import math
import numpy as np
from PIL import (
        ImageFont,
        Image,
        ImageDraw,
        ImageColor
        )
from moviepy.video.VideoClip import ImageClip

class TextClipPIL(ImageClip):
    """ Class for autogenerated text clips.
    Creates an ImageClip with help of PIL image library

    Notes
    ---------
    Currently only txt parameter with size
    or txt parameter with fontsize (size is set automatic) are supported
    color is also supported

    It works faster then moviepy ImageClip class because it doesn't create files with
    ImageMagic but it doesn't suport all the options.

    Parameters
    -----------
    txt
      A string of the text to write. Can be replaced by argument
      ``filename``.
    filename
      The name of a file in which there is the text to write.
      Can be provided instead of argument ``txt``
    size
      Size of the picture in pixels. Can be auto-set if
      method='label', but mandatory if method='caption'.
      the height can be None, it will then be auto-determined.
    bg_color
      Color of the background. See ``TextClip.list('color')``
      for a list of acceptable names.
    color
      Color of the background. See ``TextClip.list('color')`` for a
      list of acceptable names. Can be also hexadecimal color specifiers #rgb
      or #rrggbb. Or functions: "rgb(255,0,0)" or rgb(100%,0%,0%) or hsl(hue,
      saturation%, lightness%).
    font
      Path to TrueType or OpenType font file (In theory name should also be
      supported but it doesn't work at least in arch Linux). It should on
      Windows.
    stroke_color
      Color of the stroke (=contour line) of the text. If ``None``,
      there will be no stroke.
    stroke_width
      Width of the stroke, in pixels. Can be a float, like 1.5.
    method
      Either 'label' (default, the picture will be autosized so as to fit
      exactly the size) or 'caption' (the text will be drawn in a picture
      with fixed size provided with the ``size`` argument). If `caption`,
      the text will be wrapped automagically (sometimes it is buggy, not
      my fault, complain to the ImageMagick crew) and can be aligned or
      centered (see parameter ``align``).
    kerning
      Changes the default spacing between letters. For
      nstance ``kerning=-1`` will make the letters 1 pixel nearer from
      ach other compared to the default spacing.
    align
      center | East | West | South | North . Will only work if ``method``
      is set to ``caption``
    transparent
      ``True`` (default) if you want to take into account the
      transparency in the image.
    """
    text_cache = {}
    def __init__(self, txt=None, filename=None, size=None, color='black',
                 bg_color='transparent', fontsize=None, font=None,
                 stroke_color=None, stroke_width=1, method='label',
                 kerning=None, align='center', interline=None,
                 tempfilename=None, temptxt=None,
                 transparent=True, remove_temp=True,
                 print_cmd=False):
        #For nicer transparent compositing: https://nedbatchelder.com/blog/200801/truly_transparent_text_with_pil.html
#https://www.quora.com/Which-graphics-module-for-Python-is-best-for-antialiased-drawing
        self.txt = txt
        self.color = color
        self.stroke_color = stroke_color
        if fontsize is None and size is not None and font is not None:
            fontsize = self._find_fontsize(font, size)
        elif fontsize is None:
            fontsize = 10
        #First part is writting txt to tempfile
        mode = "RGBA" if transparent else "RGB"
        if font is None:
            font = ImageFont.load_default()
        else:
            #Font cache
            fs = (font, fontsize)
            if fs in TextClipPIL.text_cache:
                font = TextClipPIL.text_cache[fs]
            else:
                font = ImageFont.truetype(font, fontsize)
                TextClipPIL.text_cache[fs] = font

    
        if size is None:
            size = font.getsize(txt)
            size = tuple(math.ceil(x) for x in size)
        if print_cmd:
            print (mode, fontsize, size)

        
        if transparent and bg_color == "transparent":
#Setting background color to fully transparent font color makes much nicer
            #antialias fonts
            rgb_color = list(ImageColor.getcolor(color, mode))
            rgb_color[-1]=0
            rgb_trans = tuple(rgb_color)
            im = Image.new(mode, size, rgb_trans)
        else:
            im = Image.new(mode, size)
        d = ImageDraw.Draw(im)
        #d.fontmode = "l"
        d.text((0,0), txt, fill=color, font=font)

        ImageClip.__init__(self, np.asarray(im), transparent=transparent)

    def _find_fontsize(self, font_file, size):
        """Finds fontsize that fully fills given vertical size
        
        Checks small and large font, measures size of texts and then does a
        linear interpolation to find desired font size
        """
        min_fontsize, max_fontsize = (12, 40)
        font = ImageFont.truetype(font_file, max_fontsize)
        max_width, _ = font.getsize(self.txt)
        font = ImageFont.truetype(font_file, min_fontsize)
        min_width, _ = font.getsize(self.txt)

        return math.floor( (size[0] - min_width) * (max_fontsize- min_fontsize) / \
            (max_width-min_width) + min_fontsize)

    @staticmethod
    def list(arg):
        """ Returns the list of all valid entries for the argument of
        ``TextClip`` given (can be ``font``, ``color``, etc...) """
        if arg == "color":
            return list(ImageColor.colormap.keys())
